name: 🛡️ Security-First CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scan daily at 2 AM UTC
    - cron: '0 2 * * *'

# Security-focused permissions
permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  # Phase 1: Security Validation
  security-audit:
    name: 🔍 Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      with:
        # Full history for better security analysis
        fetch-depth: 0

    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: 📦 Install Dependencies
      run: |
        npm ci --ignore-scripts
        # Audit installation process
        echo "Dependencies installed successfully"

    - name: 🚨 Dependency Vulnerability Scan
      run: |
        echo "🔍 Scanning for vulnerable dependencies..."
        npm audit --audit-level=moderate
        npm audit --json > audit-results.json || true
        
        # Count vulnerabilities
        CRITICAL=$(jq '.metadata.vulnerabilities.critical // 0' audit-results.json)
        HIGH=$(jq '.metadata.vulnerabilities.high // 0' audit-results.json)
        
        echo "Critical vulnerabilities: $CRITICAL"
        echo "High vulnerabilities: $HIGH"
        
        # Fail on critical vulnerabilities
        if [ "$CRITICAL" -gt 0 ]; then
          echo "❌ Critical vulnerabilities found - failing build"
          exit 1
        fi
        
        # Warn on high vulnerabilities
        if [ "$HIGH" -gt 0 ]; then
          echo "⚠️ High vulnerabilities found - review required"
        fi

    - name: 🔒 License Compliance Check
      run: |
        echo "🔍 Checking license compliance..."
        npx license-checker --summary --excludePrivatePackages || true
        
        # Check for problematic licenses
        npx license-checker --json --excludePrivatePackages > licenses.json || true
        
        # Fail on GPL licenses (incompatible with commercial use)
        GPL_COUNT=$(jq -r 'to_entries[] | select(.value.licenses | type == "string" and (contains("GPL") or contains("AGPL"))) | .key' licenses.json 2>/dev/null | wc -l || echo "0")
        
        if [ "$GPL_COUNT" -gt 0 ]; then
          echo "❌ GPL licensed dependencies found - review required"
          jq -r 'to_entries[] | select(.value.licenses | type == "string" and (contains("GPL") or contains("AGPL"))) | "\\(.key): \\(.value.licenses)"' licenses.json 2>/dev/null || true
          # Don't fail build, just warn for now
        fi

    - name: 🛡️ Security Linting
      run: |
        echo "🔍 Running security-focused ESLint rules..."
        npx eslint . --ext .js,.jsx,.ts,.tsx --format json > eslint-results.json || true
        
        # Count security-related errors
        SECURITY_ERRORS=$(jq '[.[] | .messages[] | select(.ruleId | contains("security") or contains("no-eval") or contains("no-implied-eval"))] | length' eslint-results.json 2>/dev/null || echo "0")
        
        echo "Security lint errors: $SECURITY_ERRORS"
        
        if [ "$SECURITY_ERRORS" -gt 0 ]; then
          echo "❌ Security linting errors found"
          jq -r '.[] | .messages[] | select(.ruleId | contains("security") or contains("no-eval") or contains("no-implied-eval")) | "\\(.ruleId): \\(.message) at \\(.line):\\(.column)"' eslint-results.json 2>/dev/null || true
          exit 1
        fi

    - name: 🔍 Secret Scanning
      run: |
        echo "🔍 Scanning for accidentally committed secrets..."
        
        # Check for common secret patterns
        git log --all --full-history -- . | grep -E "(password|secret|key|token|api.key|private)" && echo "⚠️ Potential secrets found in git history" || echo "✅ No secrets detected in git history"
        
        # Check current files for secret patterns (basic check)
        find . -type f -name "*.js" -o -name "*.ts" -o -name "*.jsx" -o -name "*.tsx" -o -name "*.json" | xargs grep -l "sk_live\\|pk_live\\|api[_-]?key\\|secret" && echo "⚠️ Potential secrets in source files" || echo "✅ No hardcoded secrets detected"

  # Phase 2: Application Security Testing
  security-testing:
    name: 🧪 Security Testing
    runs-on: ubuntu-latest
    needs: security-audit
    timeout-minutes: 20

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: 📦 Install Dependencies
      run: npm ci

    - name: 🧪 Security Test Suite
      run: |
        echo "🧪 Running security-focused tests..."
        npm run test:security || exit 1
        echo "✅ All security tests passed"

    - name: 📊 Test Coverage Analysis
      run: |
        echo "📊 Analyzing test coverage for security-critical paths..."
        npm run test:coverage -- --json > coverage.json || true
        
        # Check coverage for security-critical files
        SECURITY_COVERAGE=$(jq '.coverageMap | to_entries[] | select(.key | contains("security") or contains("validation") or contains("auth")) | .value.s | add / length * 100' coverage.json 2>/dev/null || echo "0")
        
        echo "Security-critical code coverage: ${SECURITY_COVERAGE}%"
        
        if (( $(echo "$SECURITY_COVERAGE < 80" | bc -l) )); then
          echo "⚠️ Low coverage on security-critical code"
        fi

    - name: 🔧 Build Application
      run: |
        echo "🔧 Building application with security checks..."
        npm run build
        echo "✅ Build completed successfully"
      env:
        NODE_ENV: production
        NEXT_PUBLIC_SITE_URL: https://security-portfolio-test.vercel.app

    - name: 🛡️ Post-Build Security Validation
      run: |
        echo "🛡️ Validating build security..."
        
        # Check for client-side secrets in build output
        find .next -name "*.js" -exec grep -l "sk_live\\|pk_live\\|secret\\|private" {} \\; && echo "❌ Secrets found in build output" && exit 1 || echo "✅ No secrets in build output"
        
        # Verify security headers in build config
        if [ -f ".next/server/app/api/security-posture/route.js" ]; then
          echo "✅ Security posture API built successfully"
        else
          echo "❌ Security posture API missing from build"
          exit 1
        fi

  # Phase 3: Infrastructure Security
  infrastructure-security:
    name: 🏗️ Infrastructure Security
    runs-on: ubuntu-latest
    needs: security-testing
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🔍 Configuration Security Scan
      run: |
        echo "🔍 Scanning configuration files for security issues..."
        
        # Check next.config.js for security headers
        if grep -q "Content-Security-Policy" next.config.js; then
          echo "✅ CSP configuration found"
        else
          echo "❌ CSP configuration missing"
          exit 1
        fi
        
        if grep -q "Strict-Transport-Security" next.config.js; then
          echo "✅ HSTS configuration found"
        else
          echo "❌ HSTS configuration missing"
          exit 1
        fi
        
        # Check vercel.json for security configurations
        if [ -f "vercel.json" ]; then
          if grep -q "X-Frame-Options" vercel.json; then
            echo "✅ X-Frame-Options configured"
          else
            echo "⚠️ X-Frame-Options not found in Vercel config"
          fi
          
          if grep -q "X-Content-Type-Options" vercel.json; then
            echo "✅ X-Content-Type-Options configured"
          else
            echo "⚠️ X-Content-Type-Options not found in Vercel config"
          fi
        fi

    - name: 🛡️ Final Security Report
      run: |
        echo "🛡️ Security CI/CD Pipeline Completed Successfully"
        echo "📊 Security Metrics:"
        echo "  ✅ Dependency vulnerabilities: Scanned"
        echo "  ✅ License compliance: Verified"
        echo "  ✅ Security linting: Passed"
        echo "  ✅ Secret scanning: Clean"
        echo "  ✅ Security tests: Passed"
        echo "  ✅ Build security: Validated"
        echo "  ✅ Infrastructure security: Verified"
        echo ""
        echo "🎯 Portfolio is ready for secure deployment!"
